{"version":3,"sources":["components/users/User/User.module.css","components/common/paginator/Paginator.module.css","assets/defaultAva.png","components/users/User/User.tsx","components/common/paginator/Paginator.tsx","components/users/Users.tsx","components/users/UsersSelectors.ts","components/users/UsersContainer.tsx"],"names":["module","exports","User","React","memo","props","u","user","className","styles","to","id","alt","src","photos","large","small","defaultAva","usersPhoto","followed","disabled","followingProcess","some","onClick","setUnFollow","setFollow","name","status","Paginator","useState","Math","ceil","currentPage","portionSize","portionNumber","setPortionNumber","pagesCount","itemsCount","pageSize","pages","i","push","portionsCount","leftBorder","rightBorder","filter","p","map","selectedPage","onChangePageHandler","Users","usersTotalCount","users","getUsers","state","usersPage","getPageSize","getUsersTotalCount","getCurrentPage","getIsFetching","isFetching","getFollowingProcess","UsersContainer","changePage","this","getUsersFromServer","Preloader","PureComponent","compose","connect"],"mappings":"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","file":"static/js/3.d68ea653.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"user\":\"User_user__3yEZa\",\"usersPhoto\":\"User_usersPhoto__32ZwZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectedPage\":\"Paginator_selectedPage__bOFQE\",\"pages\":\"Paginator_pages__15CFp\"};","export default __webpack_public_path__ + \"static/media/defaultAva.816d7d33.png\";","import React from 'react';\nimport styles from './User.module.css';\nimport defaultAva from '../../../assets/defaultAva.png'\nimport {UserType} from '../../../redux/usersReducer';\nimport {NavLink} from 'react-router-dom';\n\ntype UserPropsType = {\n    user: UserType\n    setUnFollow: (id: number) => void\n    setFollow: (id: number) => void\n    followingProcess: number[]\n}\n\nexport const User = React.memo((props: UserPropsType) => {\n\n    const u = props.user\n\n    return (\n        <div className={styles.user} key={u.id}>\n                        <span>\n                            <div>\n                                <NavLink to={'/profile/' + u.id}>\n                                    <img alt={'user avatar'}\n                                         src={u.photos.large ? u.photos.large : u.photos.small ? u.photos.small : defaultAva}\n                                         className={styles.usersPhoto}/>\n                                </NavLink>\n                            </div>\n                            <div>\n                                {u.followed ? <button disabled={props.followingProcess.some(id => id === u.id)}\n                                                      onClick={() => {\n                                                          props.setUnFollow(u.id)\n                                                      }}>Unfollow</button> :\n                                    <button disabled={props.followingProcess.some(id => id === u.id)}\n                                            onClick={() => {\n                                                props.setFollow(u.id)\n                                            }}>Follow</button>}\n                            </div>\n                        </span>\n            <span>\n                    <span>\n                        <div>{u.name}</div>\n                        <div>{u.status}</div>\n                    </span>\n                    <span>\n                        <div>{'u.location.country'}</div>\n                        <div>{'u.location.city'}</div>\n                    </span>\n                </span>\n        </div>\n)\n})\n","import React, {useState} from 'react';\nimport styles from './Paginator.module.css';\n\ntype UserPropsType = {\n    itemsCount: number\n    pageSize: number\n    onChangePageHandler: (p: number) => void\n    currentPage: number\n    portionSize: number\n}\n\nexport const Paginator = React.memo((props: UserPropsType) => {\n\n    let [portionNumber, setPortionNumber] = useState<number>(Math.ceil(props.currentPage/props.portionSize))\n\n    let pagesCount = Math.ceil(props.itemsCount / props.pageSize);\n    let pages = [];\n    for (let i = 1; i <= pagesCount; i++) {\n        pages.push(i)\n    }\n\n    let portionsCount = Math.ceil(pagesCount / props.portionSize)\n\n    let leftBorder = props.portionSize * (portionNumber - 1) + 1;\n    let rightBorder = portionNumber * props.portionSize;\n\n    return (\n        <div className={styles.pages}>\n            <button disabled={(portionNumber === leftBorder)}\n                    onClick={() => {setPortionNumber(portionNumber - 1)}}>Previous\n            </button>\n\n            {pages\n                .filter(p => p >= leftBorder && p <= rightBorder)\n                .map(p => <span\n                    key={p}\n                    className={(props.currentPage === p) ? styles.selectedPage : ''}\n                    onClick={() => {\n                        props.onChangePageHandler(p)\n                    }}>{p}</span>)}\n            <button disabled={portionNumber === portionsCount}\n                    onClick={() => {setPortionNumber(portionNumber + 1)}}>Next\n            </button>\n        </div>\n    )\n})\n","import React from 'react';\nimport {UserType} from '../../redux/usersReducer';\nimport {User} from './User/User';\nimport {Paginator} from '../common/paginator/Paginator';\n\ntype UserPropsType = {\n    usersTotalCount: number\n    pageSize: number\n    onChangePageHandler: (p: number) => void\n    currentPage: number\n    users: Array<UserType>\n    setUnFollow: (id: number) => void\n    setFollow: (id: number) => void\n    followingProcess: number[]\n}\n\nexport const Users = React.memo((props: UserPropsType) => {\n    return (\n        <div className={''}>\n            <Paginator itemsCount={props.usersTotalCount} pageSize={props.pageSize}\n                       onChangePageHandler={props.onChangePageHandler} currentPage={props.currentPage}\n                       portionSize={10}/>\n            {\n                props.users.map(u => <User user={u} setUnFollow={props.setUnFollow} setFollow={props.setFollow}\n                                           followingProcess={props.followingProcess}/>)\n            }\n\n        </div>\n    )\n})\n","import {AppStateType} from \"../../redux/redux-store\";\n\nexport const getUsers = (state: AppStateType) => {\n    return state.usersPage.users\n}\nexport const getPageSize = (state: AppStateType) => {\n    return state.usersPage.pageSize\n}\nexport const getUsersTotalCount = (state: AppStateType) => {\n    return state.usersPage.usersTotalCount\n}\nexport const getCurrentPage = (state: AppStateType) => {\n    return state.usersPage.currentPage\n}\nexport const getIsFetching = (state: AppStateType) => {\n    return state.usersPage.isFetching\n}\nexport const getFollowingProcess = (state: AppStateType) => {\n    return state.usersPage.followingProcess\n}\n","import React from 'react';\nimport {connect} from 'react-redux';\nimport {\n    changePage, getUsersFromServer, setFollow, setUnFollow,\n    UserType\n} from '../../redux/usersReducer';\nimport {AppStateType} from '../../redux/redux-store';\nimport {Users} from './Users';\nimport {Preloader} from '../common/preloader/Preloader';\nimport {WithAuthRedirect} from '../../hoc/WithAuthRedirect';\nimport {compose} from 'redux';\nimport {\n    getCurrentPage,\n    getFollowingProcess,\n    getIsFetching,\n    getPageSize,\n    getUsers,\n    getUsersTotalCount\n} from './UsersSelectors';\n\nclass UsersContainer extends React.PureComponent<UsersPagePropsType> {\n    componentDidMount() {\n        this.props.getUsersFromServer(this.props.currentPage, this.props.pageSize)\n    }\n\n    onChangePageHandler = (p: number) => {\n        this.props.changePage(p, this.props.pageSize)\n    }\n\n    render() {\n        return (\n            <>\n                {this.props.isFetching ?\n                    <Preloader/> :\n                    <Users\n                        usersTotalCount={this.props.usersTotalCount}\n                        pageSize={this.props.pageSize}\n                        onChangePageHandler={this.onChangePageHandler}\n                        currentPage={this.props.currentPage}\n                        users={this.props.users}\n                        setUnFollow={this.props.setUnFollow}\n                        setFollow={this.props.setFollow}\n                        followingProcess={this.props.followingProcess}\n                    />\n                }\n            </>\n        )\n    }\n}\n\ntype MapStateToPropsType = {\n    users: Array<UserType>\n    pageSize: number\n    usersTotalCount: number\n    currentPage: number\n    isFetching: boolean\n    followingProcess: number[]\n}\n\ntype MapDispatchToProps = {\n    getUsersFromServer: (currentPage: number, pageSize: number) => void\n    changePage: (p: number, pageSize: number) => void\n    setUnFollow: (id: number) => void\n    setFollow: (id: number) => void\n}\n\nexport type UsersPagePropsType = MapStateToPropsType & MapDispatchToProps\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\n\n    return {\n        users: getUsers(state),\n        pageSize: getPageSize(state),\n        usersTotalCount: getUsersTotalCount(state),\n        currentPage: getCurrentPage(state),\n        isFetching: getIsFetching(state),\n        followingProcess: getFollowingProcess(state)\n    }\n}\n\nexport default React.memo(\n    compose<React.ComponentType>(\n        connect(mapStateToProps, {\n            getUsersFromServer,\n            changePage,\n            setUnFollow,\n            setFollow\n        }),\n        // WithAuthRedirect\n    )(UsersContainer))\n"],"sourceRoot":""}