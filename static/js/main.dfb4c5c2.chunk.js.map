{"version":3,"sources":["redux/usersReducer.ts","components/profile/Profile.module.css","components/common/preloader/Preloader.module.css","components/navbar/Navbar.module.css","api/api.ts","components/dialogs/Dialogs.module.css","reportWebVitals.ts","components/friends/Friends.tsx","components/friends/FriendsContainer.tsx","components/navbar/Navbar.tsx","components/settings/Settings.tsx","components/music/Music.tsx","components/news/News.tsx","redux/avatars/dimych.jpg","redux/avatars/eugen.jpeg","redux/avatars/margo.jpg","redux/avatars/natali.jpg","redux/avatars/bro.jpg","redux/dialogsReducer.ts","components/dialogs/DialogItem/DialogItem.tsx","components/dialogs/Message/Message.tsx","utils/validators/validators.ts","components/common/formControls/FormControls.tsx","components/dialogs/Dialogs.tsx","hoc/WithAuthRedirect.tsx","components/dialogs/DialogsSelectors.ts","components/dialogs/DialogsContainer.tsx","components/profile/profileinfo/ProfileStatusWithHooks.tsx","components/profile/profileinfo/ProfileInfo.tsx","redux/profileReducer.ts","components/profile/myposts/post/Post.tsx","components/profile/myposts/MyPosts.tsx","components/profile/ProfileSelectors.ts","components/profile/myposts/MyPostsContainer.tsx","components/profile/Profile.tsx","components/profile/ProfileContainer.tsx","redux/authReducer.ts","components/header/Header.tsx","components/header/HeaderContainer.tsx","components/login/login.tsx","redux/avatars/john.jpg","redux/avatars/lika.jpg","redux/avatars/kuka.jpg","redux/sideBarReducer.ts","redux/appReducer.ts","redux/redux-store.ts","App.tsx","index.tsx","assets/preloader.svg","components/common/preloader/Preloader.tsx","components/common/formControls/FormControls.module.css","components/profile/myposts/MyPosts.module.css","components/friends/Friends.module.css","components/profile/profileinfo/ProfileInfo.module.css","components/profile/myposts/post/Post.module.css","components/header/Header.module.css"],"names":["FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_USERS_TOTAL_COUNT","SET_FETCHING","SET_FOLLOWING_PROCESS","follow","userID","type","unfollow","setUsers","users","setFetching","isFetching","setFollowingProcess","inProcess","id","getUsersFromServer","currentPage","pageSize","dispatch","a","usersAPI","getUsers","data","items","count","totalCount","changePage","p","page","setUnFollow","setUnfollowed","resultCode","setFollow","setFollowed","initialState","usersTotalCount","followingProcess","usersReducer","state","action","map","u","followed","filter","module","exports","instance","axios","create","withCredentials","headers","baseURL","get","then","response","delete","post","getProfile","userId","profileAPI","getStatus","updateStatus","status","put","authAPI","meAuth","logIn","email","password","rememberMe","logout","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Friends","React","memo","props","className","styles","friends_wrapper","friends","f","ava","src","alt","FriendsContainer","connect","sideBar","Navbar","nav","item","to","activeClassName","active","Settings","Music","News","ADD_MESSAGE","dialogs","name","avatar","dimych","eugen","margo","natali","bro","messages","message","dialogsReducer","newMessage","DialogItem","dialog","Message","requiredField","value","maxLength","length","FormControl","meta","children","hasError","error","touched","formControl","Textarea","input","restProps","Input","Dialogs","dialogsItems","d","messagesItems","m","dialogsItem","ReduxAddNewMessageForm","onSubmit","values","addMessage","maxLength150","AddNewMessageForm","handleSubmit","Field","placeholder","component","validate","reduxForm","form","mapStateToProps","isAuth","auth","getDialogs","dialogsPage","getMessages","DialogsContainer","compose","addMessageAC","reset","Component","ProfileStatusWithHooks","useState","editMode","setEditMode","setStatus","useEffect","autoFocus","onBlur","updateUserStatus","onChange","e","currentTarget","onDoubleClick","ProfileInfo","profile","content","description","photos","large","small","fullName","contacts","mainLink","facebook","instagram","github","Preloader","ADD_POST","DELETE_POST","SET_USER_PROFILE","SET_STATUS","UPDATE_STATUS","posts","likeCount","profileReducer","newPost","postID","Post","MyPosts","postsItems","postBlock","ReduxMyNewPostForm","addPost","maxLengthValue10","MyNewPostForm","profilePage","getPosts","MyPostsContainer","addPostAC","Profile","ProfileContainer","this","match","params","authorizedUserId","toString","getUserProfileById","getUserStatusById","PureComponent","withRouter","SET_USER_DATA","setAuthUsersData","login","payload","getMyAuth","Header","header","loginBlock","onClick","HeaderContainer","maxLength30","ReduxLoginForm","formError","Login","formData","stopSubmit","_error","john","lika","kuka","sideBarReducer","INITIALIZING_COMPLETED","isInitialized","appReducer","rootReducer","combineReducers","usersPage","authReducer","formReducer","app","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleWare","UsersContainer","lazy","App","appInitializing","path","render","fallback","AppContainer","promise1","Promise","all","MainApp","ReactDOM","document","getElementById","preloader"],"mappings":"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","file":"static/js/main.dfb4c5c2.chunk.js","sourcesContent":["import {DispatchTypes} from './redux-store';\nimport {usersAPI} from '../api/api';\nimport {Dispatch} from 'redux';\n\nexport type LocationType = {\n    city: string\n    country: string\n}\nexport type UserType = {\n    id: number\n    photos: { small: string | null, large: string | null }\n    uniqueUrlName: string | null\n    name: string\n    status: string | null\n    location: LocationType\n    followed: boolean\n}\nexport type UsersPageType = {\n    users: Array<UserType>\n    pageSize: number\n    usersTotalCount: number\n    currentPage: number\n    isFetching: boolean\n    followingProcess: number[]\n}\n\nconst FOLLOW = 'USER_REDUCER/FOLLOW'\nconst UNFOLLOW = 'USER_REDUCER/UNFOLLOW'\nconst SET_USERS = 'USER_REDUCER/SET-USERS'\nconst SET_CURRENT_PAGE = 'USER_REDUCER/SET-CURRENT-PAGE'\nconst SET_USERS_TOTAL_COUNT = 'USER_REDUCER/SET-USERS-TOTAL-COUNT'\nconst SET_FETCHING = 'USER_REDUCER/SET-FETCHING'\nconst SET_FOLLOWING_PROCESS = 'USER_REDUCER/SET-FOLLOWING-PROCESS'\n\nexport const follow = (userID: number) => ({type: FOLLOW, userID} as const)\nexport const unfollow = (userID: number) => ({type: UNFOLLOW, userID} as const)\nexport const setUsers = (users: Array<UserType>) => ({type: SET_USERS, users} as const)\nexport const setCurrentPage = (page: number) => ({type: SET_CURRENT_PAGE, page} as const)\nexport const setUsersTotalCount = (count: number) => ({type: SET_USERS_TOTAL_COUNT, count} as const)\nexport const setFetching = (isFetching: boolean) => ({type: SET_FETCHING, isFetching} as const)\nexport const setFollowingProcess = (inProcess: boolean, id: number) => ({\n    type: SET_FOLLOWING_PROCESS,\n    inProcess,\n    id\n} as const)\n\nexport type UserReducerActionsTypes = ReturnType<typeof follow>\n    | ReturnType<typeof unfollow>\n    | ReturnType<typeof setUsers>\n    | ReturnType<typeof setCurrentPage>\n    | ReturnType<typeof setUsersTotalCount>\n    | ReturnType<typeof setFetching>\n    | ReturnType<typeof setFollowingProcess>\n\nexport const getUsersFromServer = (currentPage: number, pageSize: number) => async (dispatch: Dispatch<DispatchTypes>) => {\n    dispatch(setFetching(true))\n    const data = await usersAPI.getUsers(currentPage, pageSize)\n    dispatch(setUsers(data.items));\n    dispatch(setUsersTotalCount(data.totalCount));\n    dispatch(setFetching(false))\n}\nexport const changePage = (p: number, pageSize: number) => async (dispatch: Dispatch) => {\n    dispatch(setCurrentPage(p));\n    dispatch(setFetching(true));\n    const data = await usersAPI.getUsers(p, pageSize)\n    dispatch(setUsers(data.items));\n    dispatch(setFetching(false))\n}\nexport const setUnFollow = (id: number) => async (dispatch: Dispatch) => {\n    dispatch(setFollowingProcess(true, id));\n    const data = await usersAPI.setUnfollowed(id)\n    if (data.resultCode === 0) {\n        dispatch(unfollow(id))\n    }\n    dispatch(setFollowingProcess(false, id))\n    dispatch(unfollow(id))\n}\nexport const setFollow = (id: number) => async (dispatch: Dispatch) => {\n    dispatch(setFollowingProcess(true, id));\n    const data = await usersAPI.setFollowed(id)\n    if (data.resultCode === 0) {\n        dispatch(follow(id))\n    }\n    dispatch(setFollowingProcess(false, id))\n    dispatch(follow(id))\n}\n\nlet initialState: UsersPageType = {\n    users: [],\n    pageSize: 10,\n    usersTotalCount: 0,\n    currentPage: 1,\n    isFetching: false,\n    followingProcess: []\n}\n\nconst usersReducer = (state = initialState, action: UserReducerActionsTypes): UsersPageType => {\n    switch (action.type) {\n        case FOLLOW:\n            return {\n                ...state, users: state.users.map(u => (u.id === action.userID) ? {...u, followed: true} : u)\n            }\n        case UNFOLLOW:\n            return {\n                ...state, users: state.users.map(u => (u.id === action.userID) ? {...u, followed: false} : u)\n            }\n        case SET_USERS:\n            return {\n                ...state, users: action.users\n            }\n        case SET_CURRENT_PAGE:\n            return {\n                ...state, currentPage: action.page\n            }\n        case SET_USERS_TOTAL_COUNT:\n            return {\n                ...state, usersTotalCount: action.count\n            }\n        case SET_FETCHING:\n            return {\n                ...state, isFetching: action.isFetching\n            }\n        case SET_FOLLOWING_PROCESS:\n            return {\n                ...state,\n                followingProcess: action.inProcess\n                    ? [...state.followingProcess, action.id]\n                    : state.followingProcess.filter(id => id !== action.id)\n            }\n        default:\n            return state\n    }\n}\nexport default usersReducer","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Profile_content__2zZGs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloader\":\"Preloader_preloader__2G3Hk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__hqimj\",\"item\":\"Navbar_item__1rYmE\",\"active\":\"Navbar_active__2ssqZ\"};","import axios from 'axios';\nimport {UserType} from '../redux/usersReducer';\n\ntype UsersResponseType = {\n    items: UserType[]\n    totalCount: number\n    error: string | null\n}\ntype BaseResponseType<T = {}> = {\n    resultCode: number\n    messages: string[]\n    data: T\n}\n\nexport type getProfileResponseType = {\n    aboutMe: string\n    contacts: {\n        facebook: string | null\n        website: string | null\n        vk: string | null\n        twitter: string | null\n        instagram: string | null\n        youtube: string | null\n        github: string | null\n        mainLink: string | null\n    }\n    lookingForAJob: boolean\n    lookingForAJobDescription: string | null\n    fullName: string\n    userId: number\n    photos: {\n        small: string\n        large: string\n    }\n}\n\ntype AuthMeResponseType = {\n    data: {\n        id: number\n        login: string\n        email: string\n    }\n    resultCode: number\n    messages: string[]\n}\n\nconst instance = axios.create({\n    withCredentials: true,\n    headers: {'API-KEY': '29594cf8-7a2a-4c99-90e3-aafc284f801d'},\n    baseURL: `https://social-network.samuraijs.com/api/1.0/`\n})\n\nexport const usersAPI = {\n    getUsers(currentPage: number, pageSize: number) {\n        return instance.get<UsersResponseType>(\n            `users?page=${currentPage}&count=${pageSize}`\n        )\n            .then(response => {\n                return response.data\n            })\n    },\n    setUnfollowed(id: number) {\n        return instance.delete<BaseResponseType>(\n            `follow/${id}`\n        ).then(response => {\n            return response.data\n        })\n    },\n    setFollowed(id: number) {\n        return instance.post<BaseResponseType>(\n            `follow/${id}`\n        ).then(response => {\n            return response.data\n        })\n    },\n    getProfile(userId: string) {\n        return profileAPI.getProfile(userId)\n    }\n}\n\n\nexport const profileAPI = {\n    getProfile(userId: string) {\n        return instance.get<getProfileResponseType>('profile/' + userId)\n    },\n    getStatus(userId: string) {\n        return instance.get<string>('profile/status/' + userId)\n    },\n    updateStatus(status: string) {\n        return instance.put<BaseResponseType>('profile/status', {status})\n    }\n}\n\nexport const authAPI = {\n    meAuth() {\n        return instance.get<AuthMeResponseType>(\n            `auth/me`\n        );\n    },\n    logIn(email: string, password: string, rememberMe: boolean) {\n        return instance.post<BaseResponseType<{ userId: string }>>(`auth/login`, {\n            email,\n            password,\n            rememberMe\n        })\n    },\n    logout() {\n        return instance.delete<BaseResponseType>(`auth/login`)\n    }\n}\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3i6Ij\",\"dialogsItem\":\"Dialogs_dialogsItem__1L3o5\",\"active\":\"Dialogs_active__29h-a\",\"dialog\":\"Dialogs_dialog__2vSuO\",\"messages\":\"Dialogs_messages__1dMiD\",\"message\":\"Dialogs_message__3VF5g\",\"avatar\":\"Dialogs_avatar__B81a_\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport styles from './Friends.module.css';\nimport {FriendsPropsType} from \"./FriendsContainer\";\n\nexport const Friends = React.memo((props: FriendsPropsType) => {\n\n    return (\n        <div className={styles.friends_wrapper}>\n            <h4>Friends</h4>\n            {props.friends.map((f) => <div key={f.id} className={styles.ava}>\n                <img src={f.ava} alt={'user avatar'}/></div>)}\n        </div>)\n\n})\n","import {FriendsType, SideBarType} from \"../../redux/sideBarReducer\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport {connect} from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport {Friends} from \"./Friends\";\nimport React from \"react\";\n\ntype MapStateToPropsType = {\n    friends: Array<FriendsType>\n}\n\ntype MapDispatchToProps = {\n\n}\n\nexport type FriendsPropsType = MapStateToPropsType & MapDispatchToProps\n\nlet mapStateToProps = (state: AppStateType): SideBarType => {\n    return {\n        friends: state.sideBar.friends\n    }\n}\n\nlet mapDispatchToProps = (dispatch: Dispatch):MapDispatchToProps => {\n    return {\n\n    }\n}\n\nexport const FriendsContainer = React.memo(connect(mapStateToProps, mapDispatchToProps)(Friends))\n\n\n","import React from \"react\";\nimport {NavLink} from \"react-router-dom\";\nimport styles from './Navbar.module.css';\nimport {FriendsContainer} from '../friends/FriendsContainer';\n\n\nexport const Navbar = () => {\n    return (\n        <nav className={styles.nav}>\n            <div className={styles.item}>\n                <NavLink to='/profile' activeClassName={styles.active}>Profile</NavLink>\n            </div>\n            <div className={styles.item}>\n                <NavLink to='/dialogs' activeClassName={styles.active}>Messages</NavLink>\n            </div>\n            <div className={styles.item}>\n                <NavLink to='/users' activeClassName={styles.active}>Users</NavLink>\n            </div>\n            <div className={styles.item}>\n                <NavLink to='/news' activeClassName={styles.active}>News</NavLink>\n            </div>\n            <div className={styles.item}>\n                <NavLink to='/music' activeClassName={styles.active}>Music</NavLink>\n            </div>\n            <div className={styles.item}>\n                <NavLink to='/settings' activeClassName={styles.active}>Settings</NavLink>\n                <FriendsContainer />\n            </div>\n        </nav>\n    )\n}","import React from \"react\";\nimport styles from './Settings.module.css'\n\nexport const Settings = React.memo(() => (\n    <div>\n        Settings\n    </div>\n));","import React from \"react\";\nimport styles from './Music.module.css'\n\nexport const Music = React.memo(() => (\n    <div>\n        Music\n    </div>\n));","import React from \"react\";\nimport styles from './News.module.css'\n\nexport const News = React.memo(() => (\n    <div>\n        News\n    </div>\n));","export default __webpack_public_path__ + \"static/media/dimych.59681281.jpg\";","export default __webpack_public_path__ + \"static/media/eugen.8359a3de.jpeg\";","export default __webpack_public_path__ + \"static/media/margo.5f893e8f.jpg\";","export default __webpack_public_path__ + \"static/media/natali.484e6ebe.jpg\";","export default __webpack_public_path__ + \"static/media/bro.47070a78.jpg\";","import dimych from './avatars/dimych.jpg';\nimport eugen from './avatars/eugen.jpeg';\nimport margo from './avatars/margo.jpg';\nimport natali from './avatars/natali.jpg';\nimport bro from './avatars/bro.jpg';\n\nexport type DialogType = {\n    id: string\n    name: string\n    avatar?: string\n}\nexport type DialogsPageType = {\n    dialogs: Array<DialogType>\n    messages: Array<MessageType>\n}\nexport type MessageType = {\n    id: number\n    message: string\n}\n\nconst ADD_MESSAGE = 'DIALOGS_REDUCER/ADD-MESSAGE'\n\nexport const addMessageAC = (newMessage: string) => ({type: ADD_MESSAGE, newMessage} as const)\n\nexport type DialogsReducerActionsTypes = ReturnType<typeof addMessageAC>\n\nlet initialState: DialogsPageType = {\n    dialogs: [{id: '1', name: 'Dimych', avatar: dimych},\n        {id: '2', name: 'Eugen', avatar: eugen},\n        {id: '3', name: 'Margo', avatar: margo},\n        {id: '4', name: 'Natali', avatar: natali},\n        {id: '5', name: 'Bro', avatar: bro}],\n    messages: [{id: 1, message: 'Yo'},\n        {id: 2, message: 'Hi'},\n        {id: 3, message: 'How are you?'},\n        {id: 4, message: 'Super! Hope you too!'}]\n}\n\nconst dialogsReducer = (state = initialState, action: DialogsReducerActionsTypes): DialogsPageType => {\n    switch (action.type) {\n\n        case ADD_MESSAGE:\n            return {\n                ...state,\n                messages: [...state.messages, {id: 5, message: action.newMessage}]\n            };\n        default:\n            return state\n    }\n}\nexport default dialogsReducer","import React from \"react\";\nimport {NavLink} from \"react-router-dom\";\nimport styles from './../Dialogs.module.css'\n\nexport type DialogsItemType = {\n    id: string\n    name: string\n    avatar: any\n}\n\nexport const DialogItem: React.FC<DialogsItemType> = (props) => {\n    return (\n        <div className={styles.dialog}>\n            <div className={styles.avatar}>\n                <img src={props.avatar} alt=\"\"/>\n            </div>\n            <NavLink to={'/dialogs/' + props.id}>{props.name}</NavLink>\n        </div>\n    )\n}\n\n","import React from \"react\";\nimport styles from './../Dialogs.module.css'\n\nexport type MessageType = {\n    id?: number\n    message: string\n}\n\nexport const Message: React.FC<MessageType> = (props) => {\n\n    return (\n        <div className={styles.message}>{props.message}</div>\n    )\n}","export const requiredField = (value: string) => {\n    if (value) return undefined\n    return 'Field is required'\n}\n\nexport const maxLength = (length: number) => (value: string) => {\n    if (value.length > length) return `Max value is ${length} symbols`;\n    return undefined\n}","import React from 'react';\nimport styles from './FormControls.module.css';\nimport {WrappedFieldMetaProps, WrappedFieldProps} from 'redux-form';\n\ntype FormControlPropsType = {\n    meta: WrappedFieldMetaProps\n}\n\n\nconst FormControl: React.FC<FormControlPropsType> = ({meta, children}) => {\n    const hasError = meta.error && meta.touched\n    return (\n        <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\n            <div>\n                {children}\n            </div>\n            <div>\n                {hasError && <span>{meta.error}</span>}\n            </div>\n        </div>\n    )\n}\n\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\n    const {input, meta, ...restProps} = props\n    return (\n        <FormControl {...props}>\n            <textarea {...input}{...restProps}/>\n        </FormControl>\n    )\n}\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\n    const {input, meta, ...restProps} = props\n    return (\n        <FormControl {...props}>\n            <input {...input}{...restProps}/>\n        </FormControl>\n    )\n}","import React from 'react';\nimport {DialogItem} from './DialogItem/DialogItem';\nimport styles from './Dialogs.module.css'\nimport {Message} from './Message/Message';\nimport {DialogsPropsType} from './DialogsContainer';\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\nimport {maxLength, requiredField} from '../../utils/validators/validators';\nimport {Textarea} from '../common/formControls/FormControls';\n\nexport type ValuesType = {\n    newMessage: string\n}\n\nexport const Dialogs = React.memo((props: DialogsPropsType) => {\n    let dialogsItems = props.dialogs.map(d => <DialogItem key={d.id} id={d.id} name={d.name} avatar={d.avatar}/>)\n    let messagesItems = props.messages.map(m => <Message key={m.id} message={m.message}/>)\n\n    const addNewMessage = (values: ValuesType) => {\n        props.addMessage(values.newMessage)\n    }\n\n    return (\n        <div className={styles.dialogs}>\n            <div className={styles.dialogsItem}>\n                {dialogsItems}\n            </div>\n            <div className={styles.messages}>\n                <div>{messagesItems}</div>\n                <ReduxAddNewMessageForm onSubmit={addNewMessage}/>\n            </div>\n        </div>\n    )\n})\n\nconst maxLength150 = maxLength(150)\n\nconst AddNewMessageForm = React.memo((props: InjectedFormProps<ValuesType>) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field placeholder={'type here'}\n                       component={Textarea} name={'newMessage'}\n                       validate={[requiredField, maxLength150]}/>\n            </div>\n            <div>\n                <button>Add</button>\n            </div>\n        </form>\n\n    )\n})\n\nconst ReduxAddNewMessageForm = reduxForm<ValuesType>({form: 'newMessage'})(AddNewMessageForm)","import React, {ComponentType} from 'react';\nimport {connect} from 'react-redux';\nimport {Redirect} from 'react-router-dom';\nimport {AppStateType} from \"../redux/redux-store\";\n\ntype MapStatePropsType = {\n    isAuth: boolean\n}\n\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\n    isAuth: state.auth.isAuth\n})\n\nexport function WithAuthRedirect<T>(Component: ComponentType<T>) {\n    const RedirectComponent = (props: MapStatePropsType) => {\n        let {isAuth, ...restProps} = props\n        if (!isAuth) return <Redirect to={'/Login'}/>\n        return <Component {...restProps as T}/>\n    }\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\n    return ConnectedRedirectComponent\n}\n","import {AppStateType} from '../../redux/redux-store';\n\nexport const getDialogs = (state: AppStateType) => {\n    return state.dialogsPage.dialogs\n}\nexport const getMessages = (state: AppStateType) => {\n    return state.dialogsPage.messages\n}","import React from 'react';\nimport {addMessageAC, DialogType} from '../../redux/dialogsReducer';\nimport {Dialogs} from './Dialogs';\nimport {connect} from 'react-redux';\nimport {AppStateType} from '../../redux/redux-store';\nimport {compose, Dispatch} from 'redux';\nimport {MessageType} from './Message/Message';\nimport {WithAuthRedirect} from '../../hoc/WithAuthRedirect';\nimport {reset} from 'redux-form';\nimport {getDialogs, getMessages} from './DialogsSelectors';\n\ntype MapStateToPropsType = {\n    dialogs: Array<DialogType>\n    messages: Array<MessageType>\n    isAuth: boolean\n}\n\ntype MapDispatchToPropsType = {\n    addMessage: (newMessage: string) => void\n}\nexport type DialogsPropsType = MapStateToPropsType & MapDispatchToPropsType\n\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\n    return {\n        dialogs: getDialogs(state),\n        messages: getMessages(state),\n        isAuth: state.auth.isAuth\n    }\n}\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\n    return {\n        addMessage: (newMessage: string) => {\n            dispatch(addMessageAC(newMessage))\n            dispatch(reset('newMessage'))\n        }\n    }\n}\n\nexport const DialogsContainer = React.memo(\n    compose<React.ComponentType>(\n        connect(mapStateToProps, mapDispatchToProps),\n        WithAuthRedirect\n    )(Dialogs))","import React, {ChangeEvent, useEffect, useState} from 'react';\n\ntype ProfileStatusPropsType = {\n    status: string\n    updateUserStatus: (status: string) => void\n}\n\nexport const ProfileStatusWithHooks = React.memo((props: ProfileStatusPropsType) => {\n\n    const [editMode, setEditMode] = useState<boolean>(false)\n    const [status, setStatus] = useState<string>(props.status)\n\n    useEffect(() => {\n        setStatus(props.status)\n    }, [props.status])\n\n    const activateEditMode = () => {\n        setEditMode(true)\n    }\n    const deactivateEditMode = () => {\n        setEditMode(false)\n        props.updateUserStatus(status)\n    }\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setStatus(e.currentTarget.value)\n    }\n\n    return (\n        <div>\n            {!editMode ?\n                <div>\n                    <span onDoubleClick={activateEditMode}>{props.status || '--'}</span>\n                </div>\n                :\n                <div>\n                    <input autoFocus={true} onBlur={deactivateEditMode}\n                           value={status}\n                           onChange={onStatusChange}/>\n                </div>\n            }\n        </div>\n    )\n\n})","import React from 'react';\nimport styles from './ProfileInfo.module.css';\nimport {UserProfileType} from '../../../redux/profileReducer';\nimport {Preloader} from '../../common/preloader/Preloader';\nimport {ProfileStatusWithHooks} from './ProfileStatusWithHooks';\n\ntype ProfileInfoPropsType = {\n    profile: UserProfileType\n    status: string\n    updateUserStatus: (status: string) => void\n}\n\nexport const ProfileInfo = React.memo((props: ProfileInfoPropsType) => {\n    if (!props.profile) {\n        return <Preloader/>\n    }\n    return (\n        <div className={styles.content}>\n            <div className={styles.description}>\n                {props.profile.photos.large\n                    ? <div><img src={props.profile.photos.large} alt={'user avatar'}/></div> :\n                    props.profile.photos.small\n                        ? <div><img src={props.profile.photos.small} alt={'user avatar'}/></div>\n                        : <div><img\n                            src={'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSGS-e3KADHPl0FNuePNVZKd2q2VMrB7HmsuSjVZeiJjeD1BgCNnBTDwK9T_iwkyMJUdGM&usqp=CAU'}\n                            alt={'user avatar'}/>\n                        </div>}\n                <ProfileStatusWithHooks status={props.status} updateUserStatus={props.updateUserStatus}/>\n                <span>{props.profile.fullName}</span>\n                <div>Contacts:</div>\n                <div>Site: {props.profile.contacts.mainLink}</div>\n                <div>Facebook: {props.profile.contacts.facebook}</div>\n                <div>Instagram: {props.profile.contacts.instagram}</div>\n                <div>GitHub: {props.profile.contacts.github}</div>\n            </div>\n        </div>\n    );\n})","import {Dispatch} from 'redux';\nimport {getProfileResponseType, profileAPI, usersAPI} from '../api/api';\n\nexport type PostType = {\n    id?: number\n    message: string\n    likeCount: number\n}\n\nexport type UserProfileType = null | getProfileResponseType\n\nexport type ProfilePageType = {\n    posts: Array<PostType>\n    profile: UserProfileType\n    status: string\n}\n\nconst ADD_POST = 'PROFILE_REDUCER/ADD-POST'\nconst DELETE_POST = 'PROFILE_REDUCER/DELETE-POST'\nconst SET_USER_PROFILE = 'PROFILE_REDUCER/SET-USER-PROFILE'\nconst SET_STATUS = 'PROFILE_REDUCER/SET-STATUS'\nconst UPDATE_STATUS = 'PROFILE_REDUCER/UPDATE-STATUS'\n\nexport const addPostAC = (newPost: string) => ({type: ADD_POST, newPost} as const)\nexport const deletePostAC = (postID: number) => ({type: DELETE_POST, postID} as const)\nexport const setUserProfile = (profile: UserProfileType) => ({type: SET_USER_PROFILE, profile: profile} as const)\nexport const setStatus = (status: string) => ({type: SET_STATUS, status} as const)\nexport const updateStatus = (status: string) => ({type: UPDATE_STATUS, status} as const)\n\nexport type ProfileReducerActionsTypes = ReturnType<typeof addPostAC>\n    | ReturnType<typeof deletePostAC>\n    | ReturnType<typeof setUserProfile>\n    | ReturnType<typeof setStatus>\n    | ReturnType<typeof updateStatus>\n\nexport const getUserProfileById = (userId: string) => (dispatch: Dispatch) => {\n    usersAPI.getProfile(userId)\n        .then(response => {\n            dispatch(setUserProfile(response.data))\n        })\n}\nexport const getUserStatusById = (userId: string) => (dispatch: Dispatch) => {\n    profileAPI.getStatus(userId)\n        .then(response => {\n            dispatch(setStatus(response.data))\n        })\n}\nexport const updateUserStatus = (status: string) => (dispatch: Dispatch) => {\n    profileAPI.updateStatus(status)\n        .then(response => {\n            if (response.data.resultCode === 0) {\n                dispatch(setStatus(status))\n            }\n        })\n}\n\nlet initialState: ProfilePageType = {\n    posts: [{id: 1, message: 'Hello', likeCount: 15},\n        {id: 2, message: 'Hey', likeCount: 15},\n        {id: 3, message: 'Ho', likeCount: 15},\n        {id: 4, message: 'He-he', likeCount: 4}],\n    profile: null,\n    status: ''\n}\n\nconst profileReducer = (state: ProfilePageType = initialState, action: ProfileReducerActionsTypes): ProfilePageType => {\n    switch (action.type) {\n        case ADD_POST:\n            return {\n                ...state,\n                posts: [...state.posts, {id: 5, message: action.newPost, likeCount: 0}]\n            };\n        case DELETE_POST:\n            return {\n                ...state, posts: state.posts.filter(p => p.id !== action.postID)\n            }\n        case SET_USER_PROFILE:\n            return {\n                ...state, profile: action.profile\n            };\n        case SET_STATUS:\n        case UPDATE_STATUS:\n            return {\n                ...state,\n                status: action.status\n            }\n        default:\n            return state\n    }\n}\nexport default profileReducer","import React from \"react\";\nimport styles from './Post.module.css';\nimport {PostType} from \"../../../../redux/profileReducer\";\n\ntype PostPropsType = PostType\n\nexport function Post(props: PostPropsType) {\n    return (\n        <div>\n            <div className={styles.post}>\n                <div className={styles.item}>\n                    <img\n                        src='https://img.favpng.com/21/4/9/portable-network-graphics-avatar-computer-icons-image-social-media-png-favpng-r3ez8qWcYdM8jGVn2b5TGhvS8.jpg'\n                        alt={'avatar'}/>\n                    {props.message}\n                    <div>\n                        <span>likes </span>{props.likeCount}\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}","import React from \"react\";\nimport styles from './MyPosts.module.css';\nimport {MyPostsPropsType} from \"./MyPostsContainer\";\nimport {Post} from \"./post/Post\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {maxLength, requiredField} from \"../../../utils/validators/validators\";\nimport {Textarea} from \"../../common/formControls/FormControls\";\n\ntype ValuesType = {\n    newPost: string\n}\n\nexport const MyPosts = React.memo((props: MyPostsPropsType) => {\n    let postsItems = props.posts.map(p => <Post key={p.id} message={p.message} likeCount={p.likeCount}/>)\n    const addNewPost = (values: ValuesType) => {\n        props.addPost(values.newPost)\n    }\n\n    return (\n        <div className={styles.content}>\n            <div className={styles.postBlock}>\n                <h3>My posts</h3>\n                <ReduxMyNewPostForm onSubmit={addNewPost}/>\n                <div className={styles.posts}>\n                    {postsItems}\n                </div>\n            </div>\n        </div>\n    );\n})\nconst maxLengthValue10 = maxLength(10)\nconst MyNewPostForm = React.memo((props: InjectedFormProps<ValuesType>) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field placeholder={'type here'}\n                       component={Textarea} name={'newPost'}\n                validate={[requiredField, maxLengthValue10]}/>\n            </div>\n            <div>\n                <button>Add</button>\n            </div>\n        </form>\n    )\n})\n\nconst ReduxMyNewPostForm = reduxForm<ValuesType>({form: 'newPost'})(MyNewPostForm)","import {AppStateType} from \"../../redux/redux-store\";\n\nexport const getProfile = (state: AppStateType) => {\n    return state.profilePage.profile\n}\nexport const getStatus = (state: AppStateType) => {\n    return state.profilePage.status\n}\nexport const getPosts = (state: AppStateType) => {\n    return state.profilePage.posts\n}","import {addPostAC, PostType} from \"../../../redux/profileReducer\";\nimport {MyPosts} from \"./MyPosts\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../../../redux/redux-store\";\nimport { Dispatch } from \"redux\";\nimport React from \"react\";\nimport { reset } from \"redux-form\";\nimport {getPosts} from '../ProfileSelectors';\n\ntype MapStateToPropsType = {\n    posts: Array<PostType>\n}\ntype MapDispatchToPropsType = {\n    addPost: (newPost: string) => void\n}\n\nexport type MyPostsPropsType = MapStateToPropsType & MapDispatchToPropsType\n\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\n    return {\n        posts: getPosts(state)\n    }\n}\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\n    return {\n        addPost: (newPost: string) => {\n            dispatch(addPostAC(newPost))\n            dispatch(reset('newPost'))\n        }\n    }\n}\n\nexport const MyPostsContainer = React.memo(connect(mapStateToProps, mapDispatchToProps)(MyPosts))","import React from 'react';\nimport styles from './Profile.module.css';\nimport {ProfileInfo} from './profileinfo/ProfileInfo';\nimport {MyPostsContainer} from './myposts/MyPostsContainer';\nimport {UserProfileType} from '../../redux/profileReducer';\n\ntype ProfilePropsType = {\n    profile: UserProfileType | null\n    status: string\n    updateUserStatus: (status: string) => void\n}\n\nexport const Profile = React.memo((props: ProfilePropsType) => {\n    return (\n        <div className={styles.content}>\n            <ProfileInfo profile={props.profile} status={props.status} updateUserStatus={props.updateUserStatus}/>\n            <MyPostsContainer/>\n        </div>\n    )\n})","import React from 'react';\nimport {Profile} from './Profile';\nimport {connect} from 'react-redux';\nimport {UserProfileType, getUserProfileById, getUserStatusById, updateUserStatus} from '../../redux/profileReducer';\nimport {AppStateType} from '../../redux/redux-store';\nimport {Redirect, RouteComponentProps, withRouter} from 'react-router-dom';\nimport {compose} from 'redux';\nimport {getProfile, getStatus} from './ProfileSelectors';\n\nclass ProfileContainer extends React.PureComponent <ProfilePagePropsType> {\n    componentDidMount() {\n        let userId = this.props.match.params.userId;\n        if (!userId) {\n            // userId = '15667'\n            if (this.props.authorizedUserId) {\n                userId = this.props.authorizedUserId.toString()\n            }\n\n        }\n        this.props.getUserProfileById(userId)\n        this.props.getUserStatusById((userId))\n    }\n\n    render() {\n\n        return (\n            <div>\n                {this.props.authorizedUserId ?\n                    <Profile {...this.props} profile={this.props.profile} status={this.props.status}\n                             updateUserStatus={this.props.updateUserStatus}/>\n                    :\n                    <Redirect to={'/Login'}/>\n                }\n\n            </div>\n        )\n    }\n}\n\ntype MapStateToPropsType = {\n    profile: UserProfileType\n    status: string\n    authorizedUserId: number | null\n    isAuth: boolean\n}\ntype MapDispatchToPropsType = {\n    getUserProfileById: (userId: string) => void\n    getUserStatusById: (userId: string) => void\n    updateUserStatus: (status: string) => void\n}\ntype OwnProfilePagePropsType = MapStateToPropsType & MapDispatchToPropsType\ntype ParamsType = {\n    userId: string\n}\n\ntype ProfilePagePropsType = RouteComponentProps<ParamsType> & OwnProfilePagePropsType\n\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\n    profile: getProfile(state),\n    status: getStatus(state),\n    authorizedUserId: state.auth.id,\n    isAuth: state.auth.isAuth\n});\n\nexport default React.memo(\n    compose<React.ComponentType>(\n        connect(mapStateToProps, {getUserProfileById, getUserStatusById, updateUserStatus}),\n        withRouter,\n        // WithAuthRedirect\n    )(ProfileContainer))","import {Dispatch} from 'redux';\nimport {AppStateType, DispatchTypes} from './redux-store';\nimport {authAPI} from '../api/api';\nimport {ThunkAction, ThunkDispatch} from 'redux-thunk';\nimport {stopSubmit} from 'redux-form';\n\nconst SET_USER_DATA = 'AUTH_REDUCER/SET-USERS-DATA'\n\nconst setAuthUsersData = (id: number | null, login: string | null, email: string | null, isAuth: boolean) =>\n    ({type: SET_USER_DATA, payload: {id, login, email, isAuth}} as const)\n\nexport type AuthReducerActionsTypes = ReturnType<typeof setAuthUsersData>\n\nexport const getMyAuth = () => async (dispatch: Dispatch) => {\n    const response = await authAPI.meAuth()\n    if (response.data.resultCode === 0) {\n        dispatch(setAuthUsersData(response.data.data.id, response.data.data.login, response.data.data.email, true))\n    }\n    return response\n}\n\nexport const login = (email: string, password: string, rememberMe: boolean): ThunkAction<void, AppStateType, unknown, DispatchTypes> => async (dispatch: ThunkDispatch<AppStateType, unknown, DispatchTypes>) => {\n    const response = await authAPI.logIn(email, password, rememberMe);\n    if (response.data.resultCode === 0) {\n        dispatch(getMyAuth())\n    } else if (response.data.resultCode === 10) {\n        dispatch(stopSubmit('login', {_error: 'anti-bot error (captcha)'}))\n    } else {\n        dispatch(stopSubmit('login',\n            {_error: response.data.messages ? response.data.messages[0] : 'Some error occurred'}))\n    }\n}\n\nexport const logout = () => async (dispatch: Dispatch) => {\n    const response = await authAPI.logout()\n    if (response.data.resultCode === 0) {\n        dispatch(setAuthUsersData(null, null, null, false))\n    }\n}\n\ntype InitialStateType = {\n    id: number | null\n    login: string | null\n    email: string | null\n    isAuth: boolean\n}\n\nlet initialState: InitialStateType = {\n    id: null,\n    login: '',\n    email: '',\n    isAuth: false\n}\n\nconst usersReducer = (state = initialState, action: AuthReducerActionsTypes): InitialStateType => {\n    switch (action.type) {\n        case SET_USER_DATA:\n            return {\n                ...state, ...action.payload\n            }\n        default:\n            return state\n    }\n}\nexport default usersReducer","import React from \"react\";\nimport {NavLink} from \"react-router-dom\";\nimport styles from './Header.module.css';\n\n\ntype HeaderPropsType = {\n    isAuth: boolean\n    login: string | null\n    logout: () => void\n}\n\nexport function Header(props: HeaderPropsType) {\n    const logoutHandler = () => {\n        props.logout()\n    }\n    return (\n        <header className={styles.header}>\n            <img src='https://1757140519.rsc.cdn77.org/static/v3/img/products/logo.png' alt='logo'/>\n            <div className={styles.loginBlock}>\n                {props.isAuth\n                    ?\n                    <div>\n                        <span>{props.login}</span>\n                        <button onClick={logoutHandler}>Logout</button>\n                    </div>\n                    :\n                    <NavLink to={'/login'}>Login</NavLink>}\n            </div>\n        </header>\n    )\n}","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport {getMyAuth, logout} from \"../../redux/authReducer\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport {Header} from \"./Header\";\n\nclass HeaderContainer extends React.PureComponent<HeaderContainerType> {\n    render() {\n        return (\n            <Header isAuth={this.props.isAuth}\n                    login={this.props.login}\n                    logout={this.props.logout}\n            />\n        )\n    }\n}\n\ntype MapStateToPropsType = {\n    id: number | null\n    login: string | null\n    email: string | null\n    isAuth: boolean\n}\n\ntype MapDispatchToProps = {\n    logout: () => void\n}\n\nexport type HeaderContainerType = MapStateToPropsType & MapDispatchToProps\n\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\n    return {\n        id: state.auth.id,\n        login: state.auth.login,\n        email: state.auth.email,\n        isAuth: state.auth.isAuth\n    }\n}\n\nexport default React.memo(connect(mapStateToProps, {logout})(HeaderContainer))","import React from 'react';\nimport {connect} from 'react-redux';\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\nimport {maxLength, requiredField} from '../../utils/validators/validators';\nimport {Input} from '../common/formControls/FormControls';\nimport {login} from '../../redux/authReducer';\nimport {AppStateType} from '../../redux/redux-store';\nimport {Redirect} from 'react-router-dom';\nimport styles from './../common/formControls/FormControls.module.css'\n\nexport type FormDataType = {\n    email: string\n    password: string\n    rememberMe: boolean\n}\n\nconst maxLength30 = maxLength(30)\nconst LoginForm = (props: InjectedFormProps<FormDataType>) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field placeholder={'login'} component={Input} name={'name'}\n                       validate={[requiredField, maxLength30]}/>\n            </div>\n            <div>\n                <Field placeholder={'password'} component={Input} name={'password'} type={'password'}\n                       validate={[requiredField, maxLength30]}/>\n            </div>\n            <div>\n                <Field type={'checkbox'} component={Input} name={'rememberMe'}/> remember me\n            </div>\n            {props.error && <div className={styles.formError}>{props.error}</div>}\n\n            <div>\n                <button>login</button>\n            </div>\n        </form>\n    )\n}\n\nconst ReduxLoginForm = reduxForm<FormDataType>({form: 'login'})(LoginForm)\n\nconst Login = React.memo((props: LoginPropsType) => {\n    const onSubmit = (formData: FormDataType) => {\n        props.login(formData.email, formData.password, formData.rememberMe)\n    }\n    if (props.isAuth) {\n        return <Redirect to={'/profile'}/>\n\n    }\n    return (\n        <div>\n            <h1>Login</h1>\n            <ReduxLoginForm onSubmit={onSubmit}/>\n        </div>\n    )\n})\n\ntype MapStateToPropsType = {\n    isAuth: boolean\n}\ntype MapDispatchPropsType = {\n    login: (email: string, password: string, rememberMe: boolean) => void\n}\ntype LoginPropsType = MapDispatchPropsType & MapStateToPropsType\n\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\n    return {\n        isAuth: state.auth.isAuth\n    }\n}\n\nexport default React.memo(connect(mapStateToProps, {login})(Login))","export default __webpack_public_path__ + \"static/media/john.b7c51776.jpg\";","export default __webpack_public_path__ + \"static/media/lika.81313dde.jpg\";","export default __webpack_public_path__ + \"static/media/kuka.32539c50.jpg\";","import john from './avatars/john.jpg';\nimport lika from './avatars/lika.jpg';\nimport kuka from './avatars/kuka.jpg';\n\nexport type FriendsType = {\n    id: number\n    name: string\n    ava: string\n}\nexport type SideBarType = {\n    friends: Array<FriendsType>\n}\n\nconst newSideBarAction = 'SIDEBAR_REDUCER/NEW_ACTION'\nconst sideBarAC = () => ({type: newSideBarAction} as const)\n\n\nexport type SideBarReducerActionsTypes = ReturnType<typeof sideBarAC>\n\nlet initialState: SideBarType = {\n    friends: [\n        {id: 1, name: 'John', ava: john},\n        {id: 2, name: 'Lika', ava: lika},\n        {id: 3, name: 'Kuka', ava: kuka},\n    ]\n}\n\nconst sideBarReducer = (state = initialState, action: SideBarReducerActionsTypes): SideBarType => {\n\n    return state\n}\n\nexport default sideBarReducer","import {AppStateType, DispatchTypes} from './redux-store';\nimport {ThunkAction, ThunkDispatch} from 'redux-thunk';\nimport {getMyAuth} from './authReducer';\n\n\nconst INITIALIZING_COMPLETED = 'APP_REDUCER/INITIALIZING_COMPLETED'\n\nconst setInitializingCompleted = () => ({type: INITIALIZING_COMPLETED} as const)\n\nexport type AppReducerActionsTypes = ReturnType<typeof setInitializingCompleted>\n\nexport const appInitializing = (): ThunkAction<void, AppStateType, unknown, DispatchTypes> => (dispatch: ThunkDispatch<AppStateType, unknown, DispatchTypes>) => {\n    let promise1 = dispatch(getMyAuth())\n\n    Promise.all([promise1]).then(() => {\n        dispatch(setInitializingCompleted())\n    })\n\n}\n\ntype InitialStateType = {\n    isInitialized: boolean\n}\n\nlet initialState: InitialStateType = {\n    isInitialized: false\n}\n\nconst appReducer = (state = initialState, action: AppReducerActionsTypes): InitialStateType => {\n    switch (action.type) {\n        case INITIALIZING_COMPLETED:\n            return {\n                ...state, isInitialized: true\n            }\n        default:\n            return state\n    }\n}\nexport default appReducer","import {applyMiddleware, combineReducers, compose, createStore} from 'redux';\nimport {reducer as formReducer} from 'redux-form'\nimport thunkMiddleWare from 'redux-thunk';\nimport profileReducer, {\n    ProfileReducerActionsTypes\n} from './profileReducer';\nimport dialogsReducer, {DialogsReducerActionsTypes} from './dialogsReducer';\nimport sideBarReducer, {SideBarReducerActionsTypes} from './sideBarReducer';\nimport usersReducer, {\n    UserReducerActionsTypes\n} from './usersReducer';\nimport authReducer, {AuthReducerActionsTypes} from './authReducer';\nimport appReducer, {AppReducerActionsTypes} from './appReducer';\n\nexport type DispatchTypes =\n    | DialogsReducerActionsTypes\n    | AuthReducerActionsTypes\n    | ProfileReducerActionsTypes\n    | AppReducerActionsTypes\n    | SideBarReducerActionsTypes\n    | UserReducerActionsTypes\n\nexport const rootReducer = combineReducers(\n    {\n        profilePage: profileReducer,\n        dialogsPage: dialogsReducer,\n        sideBar: sideBarReducer,\n        usersPage: usersReducer,\n        auth: authReducer,\n        form: formReducer,\n        app: appReducer\n    }\n);\n\nexport type AppStateType = ReturnType<typeof rootReducer>\n\n/*export const store = createStore(rootReducer, applyMiddleware(thunkMiddleWare))\n\n\n// @ts-ignore\nwindow.store = store*/\n\n// @ts-ignore\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nexport const store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleWare)\n));","import React, { Suspense } from 'react';\nimport './App.css';\nimport {Navbar} from './components/navbar/Navbar';\nimport {BrowserRouter, Route} from 'react-router-dom';\nimport {Settings} from './components/settings/Settings';\nimport {Music} from './components/music/Music';\nimport {News} from './components/news/News';\nimport {DialogsContainer} from './components/dialogs/DialogsContainer';\nimport {FriendsContainer} from './components/friends/FriendsContainer';\nimport ProfileContainer from './components/profile/ProfileContainer';\nimport HeaderContainer from './components/header/HeaderContainer';\nimport Login from \"./components/login/login\";\nimport {connect, Provider} from 'react-redux';\nimport {AppStateType, store} from './redux/redux-store';\nimport {appInitializing} from \"./redux/appReducer\";\nimport {Preloader} from \"./components/common/preloader/Preloader\";\n\nconst UsersContainer = React.lazy(() => import('./components/users/UsersContainer'));\n\nclass App extends React.PureComponent<AppPropsType> {\n    componentDidMount() {\n        this.props.appInitializing()\n    }\n    render() {\n        if(!this.props.isInitialized) {\n            return <Preloader/>\n        }\n\n        return (\n            <div className={'app-wrapper'}>\n                <HeaderContainer/>\n                <Navbar/>\n                <div className={'app-wrapper-content'}>\n                    <Route /*exact*/ path='/dialogs' render={() => <DialogsContainer/>}/>\n                    <Route /*exact*/ path='/profile/:userId?' render={() => <ProfileContainer/>}/>\n                    <Route /*exact*/ path='/users' render={() => <Suspense fallback={<Preloader/>}>\n                        <UsersContainer/>\n                        </Suspense>\n                        }/>\n                    <Route /*exact*/ path='/login' render={() => <Login/>}/>\n                    <Route /*exact*/ path='/news' render={() => <News/>}/>\n                    <Route /*exact*/ path='/music' render={() => <Music/>}/>\n                    <Route /*exact*/ path='/settings' render={() => <Settings/>}/>\n                </div>\n            </div>\n        );\n    }\n}\n\ntype MapStateToPropsType = {\n    isInitialized: boolean\n}\ntype MapDispatchToProps = {\n    appInitializing: () => void\n}\ntype AppPropsType = MapStateToPropsType & MapDispatchToProps\n\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\n    return {\n        isInitialized: state.app.isInitialized\n    }\n\n}\n\nconst AppContainer = React.memo(connect(mapStateToProps, {appInitializing})(App))\n\nconst MainApp = () => {\n    return (\n        <BrowserRouter>\n            <Provider store={store}>\n                <AppContainer/>\n            </Provider>\n        </BrowserRouter>\n    )\n}\n\nexport default MainApp","import reportWebVitals from './reportWebVitals';\nimport ReactDOM from \"react-dom\";\nimport React from \"react\";\nimport MainApp from './App';\n\nReactDOM.render(\n    <MainApp/>,\n    document.getElementById('root')\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();","export default __webpack_public_path__ + \"static/media/preloader.b98a8c76.svg\";","import React from 'react';\nimport styles from './Preloader.module.css';\nimport preloader from '../../../assets/preloader.svg'\n\nexport const Preloader = () => {\n    return (\n        <div className={styles.preloader}><img src={preloader} alt='preloader'/></div>\n    )\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"FormControls_error__2qadf\",\"formError\":\"FormControls_formError__3Wwhf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postBlock\":\"MyPosts_postBlock__7Uk7-\",\"posts\":\"MyPosts_posts__12RpE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friends_wrapper\":\"Friends_friends_wrapper__3emW-\",\"ava\":\"Friends_ava__1tXNT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"description\":\"ProfileInfo_description__3Oe3X\",\"background\":\"ProfileInfo_background__1i6zn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3C6DD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1MOL-\",\"loginBlock\":\"Header_loginBlock__1z7oD\"};"],"sourceRoot":""}